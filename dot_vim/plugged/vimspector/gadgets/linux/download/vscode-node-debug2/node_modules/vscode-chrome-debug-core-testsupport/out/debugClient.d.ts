import { IGetLoadedSourcesResponseBody } from 'vscode-chrome-debug-core';
import { DebugClient } from 'vscode-debugadapter-testsupport';
import { DebugProtocol } from 'vscode-debugprotocol';
export declare const THREAD_ID = 1;
export declare function setBreakpointOnStart(dc: DebugClient, bps: DebugProtocol.SourceBreakpoint[], program: string, expLine?: number, expCol?: number, expVerified?: boolean): Promise<void>;
export declare function setBreakpoint(dc: DebugClient, bps: DebugProtocol.SourceBreakpoint[], program: string, expLine?: number, expCol?: number, expVerified?: boolean): Promise<void>;
export interface IExpectedStopLocation {
    path?: string;
    line?: number;
    column?: number;
}
export declare class ExtendedDebugClient extends DebugClient {
    toggleSkipFileStatus(aPath: string): Promise<DebugProtocol.Response>;
    loadedSources(args: DebugProtocol.LoadedSourcesArguments): Promise<IGetLoadedSourcesResponseBody>;
    continueRequest(): Promise<DebugProtocol.ContinueResponse>;
    nextRequest(): Promise<DebugProtocol.NextResponse>;
    stepOutRequest(): Promise<DebugProtocol.StepOutResponse>;
    stepInRequest(): Promise<DebugProtocol.StepInResponse>;
    stackTraceRequest(): Promise<DebugProtocol.StackTraceResponse>;
    continueAndStop(): Promise<any>;
    nextAndStop(): Promise<any>;
    stepOutAndStop(): Promise<any>;
    stepInAndStop(): Promise<any>;
    continueTo(reason: string, expected: IExpectedStopLocation): Promise<DebugProtocol.StackTraceResponse>;
    nextTo(reason: string, expected: IExpectedStopLocation): Promise<DebugProtocol.StackTraceResponse>;
    stepOutTo(reason: string, expected: IExpectedStopLocation): Promise<DebugProtocol.StackTraceResponse>;
    stepInTo(reason: string, expected: IExpectedStopLocation): Promise<DebugProtocol.StackTraceResponse>;
    waitForEvent(eventType: string): Promise<DebugProtocol.Event>;
    /**
     * This is a copy of DebugClient's hitBreakpoint, except that it doesn't assert 'verified' by default. In the Chrome debugger, a bp may be verified or unverified at launch,
     * depending on whether it's randomly received before or after the 'scriptParsed' event for its script. So we can't always check this prop.
     */
    hitBreakpointUnverified(launchArgs: any, location: {
        path: string;
        line: number;
        column?: number;
        verified?: boolean;
    }, expected?: {
        path?: string;
        line?: number;
        column?: number;
        verified?: boolean;
    }): Promise<any>;
}
